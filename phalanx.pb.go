// Code generated by protoc-gen-go.
// source: phalanx.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	phalanx.proto

It has these top-level messages:
	SigningRequest
	SigningResponse
	HostConfiguration
	Issue
	Metric
	Host
	Reporter
	ReportRequest
	ReportResponse
	LogLine
	RecordLogsResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "google/protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Metric_Type int32

const (
	Metric_UNKNOWN     Metric_Type = 0
	Metric_UNCOUNTABLE Metric_Type = 1
	Metric_STRINGARRAY Metric_Type = 2
)

var Metric_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "UNCOUNTABLE",
	2: "STRINGARRAY",
}
var Metric_Type_value = map[string]int32{
	"UNKNOWN":     0,
	"UNCOUNTABLE": 1,
	"STRINGARRAY": 2,
}

func (x Metric_Type) String() string {
	return proto.EnumName(Metric_Type_name, int32(x))
}
func (Metric_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type Metric_Status int32

const (
	Metric_NONE    Metric_Status = 0
	Metric_HEALTHY Metric_Status = 1
	Metric_WARNING Metric_Status = 2
	Metric_DANGER  Metric_Status = 3
)

var Metric_Status_name = map[int32]string{
	0: "NONE",
	1: "HEALTHY",
	2: "WARNING",
	3: "DANGER",
}
var Metric_Status_value = map[string]int32{
	"NONE":    0,
	"HEALTHY": 1,
	"WARNING": 2,
	"DANGER":  3,
}

func (x Metric_Status) String() string {
	return proto.EnumName(Metric_Status_name, int32(x))
}
func (Metric_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 1} }

type SigningRequest struct {
	Csr string `protobuf:"bytes,1,opt,name=csr" json:"csr,omitempty"`
}

func (m *SigningRequest) Reset()                    { *m = SigningRequest{} }
func (m *SigningRequest) String() string            { return proto.CompactTextString(m) }
func (*SigningRequest) ProtoMessage()               {}
func (*SigningRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SigningResponse struct {
	Cert string `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
}

func (m *SigningResponse) Reset()                    { *m = SigningResponse{} }
func (m *SigningResponse) String() string            { return proto.CompactTextString(m) }
func (*SigningResponse) ProtoMessage()               {}
func (*SigningResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type HostConfiguration struct {
	Port uint32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
}

func (m *HostConfiguration) Reset()                    { *m = HostConfiguration{} }
func (m *HostConfiguration) String() string            { return proto.CompactTextString(m) }
func (*HostConfiguration) ProtoMessage()               {}
func (*HostConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Issue struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Issue) Reset()                    { *m = Issue{} }
func (m *Issue) String() string            { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()               {}
func (*Issue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Metric struct {
	Id        string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	HumanName string        `protobuf:"bytes,2,opt,name=humanName" json:"humanName,omitempty"`
	HumanDesc string        `protobuf:"bytes,3,opt,name=humanDesc" json:"humanDesc,omitempty"`
	Type      Metric_Type   `protobuf:"varint,4,opt,name=type,enum=rpc.Metric_Type" json:"type,omitempty"`
	Status    Metric_Status `protobuf:"varint,5,opt,name=status,enum=rpc.Metric_Status" json:"status,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Metric_IntValue
	//	*Metric_StringArrayValue
	Value isMetric_Value `protobuf_oneof:"value"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isMetric_Value interface {
	isMetric_Value()
}

type Metric_IntValue struct {
	IntValue int64 `protobuf:"varint,6,opt,name=intValue,oneof"`
}
type Metric_StringArrayValue struct {
	StringArrayValue *Metric_StringArray `protobuf:"bytes,7,opt,name=stringArrayValue,oneof"`
}

func (*Metric_IntValue) isMetric_Value()         {}
func (*Metric_StringArrayValue) isMetric_Value() {}

func (m *Metric) GetValue() isMetric_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Metric) GetIntValue() int64 {
	if x, ok := m.GetValue().(*Metric_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *Metric) GetStringArrayValue() *Metric_StringArray {
	if x, ok := m.GetValue().(*Metric_StringArrayValue); ok {
		return x.StringArrayValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Metric) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Metric_OneofMarshaler, _Metric_OneofUnmarshaler, _Metric_OneofSizer, []interface{}{
		(*Metric_IntValue)(nil),
		(*Metric_StringArrayValue)(nil),
	}
}

func _Metric_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Metric)
	// value
	switch x := m.Value.(type) {
	case *Metric_IntValue:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntValue))
	case *Metric_StringArrayValue:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringArrayValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Metric.Value has unexpected type %T", x)
	}
	return nil
}

func _Metric_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Metric)
	switch tag {
	case 6: // value.intValue
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Metric_IntValue{int64(x)}
		return true, err
	case 7: // value.stringArrayValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Metric_StringArray)
		err := b.DecodeMessage(msg)
		m.Value = &Metric_StringArrayValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Metric_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Metric)
	// value
	switch x := m.Value.(type) {
	case *Metric_IntValue:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntValue))
	case *Metric_StringArrayValue:
		s := proto.Size(x.StringArrayValue)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Metric_StringArray struct {
	Value []string `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *Metric_StringArray) Reset()                    { *m = Metric_StringArray{} }
func (m *Metric_StringArray) String() string            { return proto.CompactTextString(m) }
func (*Metric_StringArray) ProtoMessage()               {}
func (*Metric_StringArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type Host struct {
	Id        string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Parents   []string `protobuf:"bytes,2,rep,name=parents" json:"parents,omitempty"`
	HumanName string   `protobuf:"bytes,3,opt,name=humanName" json:"humanName,omitempty"`
}

func (m *Host) Reset()                    { *m = Host{} }
func (m *Host) String() string            { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()               {}
func (*Host) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Reporter struct {
	Id       string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Issues   []*Issue  `protobuf:"bytes,2,rep,name=issues" json:"issues,omitempty"`
	Metrics  []*Metric `protobuf:"bytes,3,rep,name=metrics" json:"metrics,omitempty"`
	Children []*Host   `protobuf:"bytes,4,rep,name=children" json:"children,omitempty"`
}

func (m *Reporter) Reset()                    { *m = Reporter{} }
func (m *Reporter) String() string            { return proto.CompactTextString(m) }
func (*Reporter) ProtoMessage()               {}
func (*Reporter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Reporter) GetIssues() []*Issue {
	if m != nil {
		return m.Issues
	}
	return nil
}

func (m *Reporter) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Reporter) GetChildren() []*Host {
	if m != nil {
		return m.Children
	}
	return nil
}

type ReportRequest struct {
	Reporters []*Reporter `protobuf:"bytes,1,rep,name=reporters" json:"reporters,omitempty"`
	Host      *Host       `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *ReportRequest) Reset()                    { *m = ReportRequest{} }
func (m *ReportRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportRequest) ProtoMessage()               {}
func (*ReportRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReportRequest) GetReporters() []*Reporter {
	if m != nil {
		return m.Reporters
	}
	return nil
}

func (m *ReportRequest) GetHost() *Host {
	if m != nil {
		return m.Host
	}
	return nil
}

type ReportResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ReportResponse) Reset()                    { *m = ReportResponse{} }
func (m *ReportResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportResponse) ProtoMessage()               {}
func (*ReportResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type LogLine struct {
	Reporter  string                     `protobuf:"bytes,1,opt,name=reporter" json:"reporter,omitempty"`
	Line      string                     `protobuf:"bytes,2,opt,name=line" json:"line,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Host      string                     `protobuf:"bytes,4,opt,name=host" json:"host,omitempty"`
	Tags      []string                   `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
}

func (m *LogLine) Reset()                    { *m = LogLine{} }
func (m *LogLine) String() string            { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()               {}
func (*LogLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *LogLine) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type RecordLogsResponse struct {
	ReceivedLines uint32 `protobuf:"varint,1,opt,name=receivedLines" json:"receivedLines,omitempty"`
}

func (m *RecordLogsResponse) Reset()                    { *m = RecordLogsResponse{} }
func (m *RecordLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*RecordLogsResponse) ProtoMessage()               {}
func (*RecordLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*SigningRequest)(nil), "rpc.SigningRequest")
	proto.RegisterType((*SigningResponse)(nil), "rpc.SigningResponse")
	proto.RegisterType((*HostConfiguration)(nil), "rpc.HostConfiguration")
	proto.RegisterType((*Issue)(nil), "rpc.Issue")
	proto.RegisterType((*Metric)(nil), "rpc.Metric")
	proto.RegisterType((*Metric_StringArray)(nil), "rpc.Metric.StringArray")
	proto.RegisterType((*Host)(nil), "rpc.Host")
	proto.RegisterType((*Reporter)(nil), "rpc.Reporter")
	proto.RegisterType((*ReportRequest)(nil), "rpc.ReportRequest")
	proto.RegisterType((*ReportResponse)(nil), "rpc.ReportResponse")
	proto.RegisterType((*LogLine)(nil), "rpc.LogLine")
	proto.RegisterType((*RecordLogsResponse)(nil), "rpc.RecordLogsResponse")
	proto.RegisterEnum("rpc.Metric_Type", Metric_Type_name, Metric_Type_value)
	proto.RegisterEnum("rpc.Metric_Status", Metric_Status_name, Metric_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for PhalanxCollector service

type PhalanxCollectorClient interface {
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	ConfigureMe(ctx context.Context, in *Host, opts ...grpc.CallOption) (*HostConfiguration, error)
	SignMe(ctx context.Context, in *SigningRequest, opts ...grpc.CallOption) (*SigningResponse, error)
	RecordLogs(ctx context.Context, opts ...grpc.CallOption) (PhalanxCollector_RecordLogsClient, error)
}

type phalanxCollectorClient struct {
	cc *grpc.ClientConn
}

func NewPhalanxCollectorClient(cc *grpc.ClientConn) PhalanxCollectorClient {
	return &phalanxCollectorClient{cc}
}

func (c *phalanxCollectorClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := grpc.Invoke(ctx, "/rpc.PhalanxCollector/Report", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phalanxCollectorClient) ConfigureMe(ctx context.Context, in *Host, opts ...grpc.CallOption) (*HostConfiguration, error) {
	out := new(HostConfiguration)
	err := grpc.Invoke(ctx, "/rpc.PhalanxCollector/ConfigureMe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phalanxCollectorClient) SignMe(ctx context.Context, in *SigningRequest, opts ...grpc.CallOption) (*SigningResponse, error) {
	out := new(SigningResponse)
	err := grpc.Invoke(ctx, "/rpc.PhalanxCollector/SignMe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phalanxCollectorClient) RecordLogs(ctx context.Context, opts ...grpc.CallOption) (PhalanxCollector_RecordLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PhalanxCollector_serviceDesc.Streams[0], c.cc, "/rpc.PhalanxCollector/RecordLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &phalanxCollectorRecordLogsClient{stream}
	return x, nil
}

type PhalanxCollector_RecordLogsClient interface {
	Send(*LogLine) error
	CloseAndRecv() (*RecordLogsResponse, error)
	grpc.ClientStream
}

type phalanxCollectorRecordLogsClient struct {
	grpc.ClientStream
}

func (x *phalanxCollectorRecordLogsClient) Send(m *LogLine) error {
	return x.ClientStream.SendMsg(m)
}

func (x *phalanxCollectorRecordLogsClient) CloseAndRecv() (*RecordLogsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecordLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PhalanxCollector service

type PhalanxCollectorServer interface {
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
	ConfigureMe(context.Context, *Host) (*HostConfiguration, error)
	SignMe(context.Context, *SigningRequest) (*SigningResponse, error)
	RecordLogs(PhalanxCollector_RecordLogsServer) error
}

func RegisterPhalanxCollectorServer(s *grpc.Server, srv PhalanxCollectorServer) {
	s.RegisterService(&_PhalanxCollector_serviceDesc, srv)
}

func _PhalanxCollector_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PhalanxCollectorServer).Report(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PhalanxCollector_ConfigureMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PhalanxCollectorServer).ConfigureMe(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PhalanxCollector_SignMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PhalanxCollectorServer).SignMe(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PhalanxCollector_RecordLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PhalanxCollectorServer).RecordLogs(&phalanxCollectorRecordLogsServer{stream})
}

type PhalanxCollector_RecordLogsServer interface {
	SendAndClose(*RecordLogsResponse) error
	Recv() (*LogLine, error)
	grpc.ServerStream
}

type phalanxCollectorRecordLogsServer struct {
	grpc.ServerStream
}

func (x *phalanxCollectorRecordLogsServer) SendAndClose(m *RecordLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *phalanxCollectorRecordLogsServer) Recv() (*LogLine, error) {
	m := new(LogLine)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PhalanxCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PhalanxCollector",
	HandlerType: (*PhalanxCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _PhalanxCollector_Report_Handler,
		},
		{
			MethodName: "ConfigureMe",
			Handler:    _PhalanxCollector_ConfigureMe_Handler,
		},
		{
			MethodName: "SignMe",
			Handler:    _PhalanxCollector_SignMe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordLogs",
			Handler:       _PhalanxCollector_RecordLogs_Handler,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x54, 0xef, 0x4e, 0xe3, 0x46,
	0x10, 0xc7, 0xb1, 0x71, 0x92, 0x71, 0x13, 0xdc, 0x2d, 0x2a, 0x91, 0xd5, 0xaa, 0x68, 0x0b, 0x2a,
	0xa2, 0x52, 0x68, 0x83, 0x90, 0xd0, 0x7d, 0x0b, 0x10, 0x11, 0x74, 0xc1, 0x9c, 0x96, 0x70, 0x08,
	0xdd, 0x27, 0xe3, 0x2c, 0x8e, 0xa5, 0xc4, 0xf6, 0x79, 0x6d, 0x74, 0xbc, 0xc3, 0xbd, 0xc1, 0xbd,
	0xc1, 0xbd, 0xd6, 0xbd, 0xc8, 0xed, 0xae, 0xd7, 0x4e, 0x0c, 0xdf, 0x66, 0x67, 0x7e, 0x33, 0x3b,
	0xf3, 0x9b, 0x3f, 0xd0, 0x49, 0xe6, 0xde, 0xc2, 0x8b, 0xbe, 0xf4, 0x93, 0x34, 0xce, 0x62, 0xa4,
	0xa7, 0x89, 0xef, 0xfc, 0x15, 0xc4, 0x71, 0xb0, 0xa0, 0x47, 0x52, 0xf5, 0x98, 0x3f, 0x1d, 0x65,
	0xe1, 0x92, 0xb2, 0xcc, 0x5b, 0x26, 0x05, 0x0a, 0x63, 0xe8, 0xde, 0x86, 0x41, 0x14, 0x46, 0x01,
	0xa1, 0x9f, 0x73, 0x6e, 0x42, 0x36, 0xe8, 0x3e, 0x4b, 0x7b, 0xda, 0xae, 0x76, 0xd0, 0x26, 0x42,
	0xc4, 0xfb, 0xb0, 0x55, 0x61, 0x58, 0x12, 0x47, 0x8c, 0x22, 0x04, 0x86, 0x4f, 0xd3, 0x4c, 0xa1,
	0xa4, 0x8c, 0xff, 0x81, 0x5f, 0xc7, 0x31, 0xcb, 0xce, 0xe3, 0xe8, 0x29, 0x0c, 0xf2, 0xd4, 0xcb,
	0xc2, 0x38, 0x12, 0xc0, 0x24, 0x56, 0xc0, 0x0e, 0x91, 0x32, 0xde, 0x81, 0xcd, 0x2b, 0xc6, 0x72,
	0x8a, 0xba, 0xd0, 0x08, 0x67, 0x2a, 0x06, 0x97, 0xf0, 0x77, 0x1d, 0xcc, 0x6b, 0x9a, 0xa5, 0xa1,
	0xff, 0xda, 0x84, 0xfe, 0x80, 0xf6, 0x3c, 0x5f, 0x7a, 0x91, 0xeb, 0x2d, 0x69, 0xaf, 0x21, 0xd5,
	0x2b, 0x45, 0x65, 0xbd, 0xa0, 0xcc, 0xef, 0xe9, 0x6b, 0x56, 0xa1, 0x40, 0x7b, 0x60, 0x64, 0x2f,
	0x09, 0xed, 0x19, 0xdc, 0xd0, 0x1d, 0xd8, 0x7d, 0x4e, 0x4c, 0xbf, 0xf8, 0xa6, 0x3f, 0xe5, 0x7a,
	0x22, 0xad, 0xe8, 0x10, 0x4c, 0x4e, 0x4c, 0x96, 0xb3, 0xde, 0xa6, 0xc4, 0xa1, 0x75, 0xdc, 0xad,
	0xb4, 0x10, 0x85, 0xe0, 0xff, 0xb5, 0xc2, 0x28, 0xfb, 0xe8, 0x2d, 0x72, 0xda, 0x33, 0x39, 0x5a,
	0x1f, 0x6f, 0x90, 0x4a, 0x83, 0x46, 0x60, 0x33, 0xee, 0x15, 0x05, 0xc3, 0x34, 0xf5, 0x5e, 0x0a,
	0x54, 0x93, 0xa3, 0xac, 0xc1, 0x4e, 0x3d, 0x66, 0x85, 0xe1, 0xee, 0x6f, 0x5c, 0x9c, 0xbf, 0xc1,
	0x5a, 0x83, 0xa0, 0x6d, 0xd8, 0x7c, 0x96, 0xa1, 0xb4, 0x5d, 0x9d, 0xd7, 0x57, 0x3c, 0xf0, 0x09,
	0x18, 0xa2, 0x06, 0x64, 0x41, 0xf3, 0xce, 0x7d, 0xef, 0xde, 0xdc, 0xbb, 0xf6, 0x06, 0xda, 0x02,
	0xeb, 0xce, 0x3d, 0xbf, 0xb9, 0x73, 0xa7, 0xc3, 0xb3, 0xc9, 0xc8, 0xd6, 0x84, 0xe2, 0x76, 0x4a,
	0xae, 0xdc, 0xcb, 0x21, 0x21, 0xc3, 0x07, 0xbb, 0x81, 0x4f, 0xc1, 0x2c, 0x4a, 0x42, 0x2d, 0x30,
	0xdc, 0x1b, 0x77, 0xc4, 0xbd, 0x78, 0x88, 0xf1, 0x68, 0x38, 0x99, 0x8e, 0x1f, 0xb8, 0x07, 0x7f,
	0xdc, 0x0f, 0x89, 0xcb, 0x5d, 0xec, 0x06, 0x02, 0x30, 0x2f, 0x86, 0xee, 0xe5, 0x88, 0xd8, 0xfa,
	0x59, 0x53, 0xa5, 0x81, 0x5d, 0x30, 0x44, 0xbb, 0xdf, 0x74, 0xaa, 0x07, 0xcd, 0xc4, 0x4b, 0x69,
	0x94, 0x31, 0xde, 0x27, 0x91, 0x69, 0xf9, 0xac, 0xf7, 0x50, 0x7f, 0xd5, 0x43, 0xfc, 0x55, 0x83,
	0x16, 0xa1, 0x62, 0x40, 0x68, 0xfa, 0x26, 0x28, 0x06, 0x33, 0x14, 0x23, 0x53, 0xc4, 0xb4, 0x06,
	0x20, 0x89, 0x94, 0x53, 0x44, 0x94, 0x05, 0xed, 0x43, 0x73, 0x29, 0x99, 0x65, 0x3c, 0xb8, 0x00,
	0x59, 0x6b, 0x6c, 0x93, 0xd2, 0xc6, 0x61, 0x2d, 0x7f, 0x1e, 0x2e, 0x66, 0x3c, 0x27, 0x3e, 0x11,
	0x02, 0xd7, 0x96, 0x38, 0x51, 0x0c, 0xa9, 0x4c, 0xf8, 0x13, 0x74, 0x8a, 0x6c, 0xca, 0xbd, 0xf8,
	0x17, 0xda, 0xa9, 0x4a, 0x8f, 0xc9, 0x1e, 0x58, 0x83, 0x8e, 0x74, 0x2c, 0x93, 0x26, 0x2b, 0x3b,
	0xfa, 0x13, 0x8c, 0x39, 0x8f, 0x27, 0x27, 0xb5, 0xf6, 0x81, 0x54, 0xe3, 0x43, 0xe8, 0x96, 0xc1,
	0xd5, 0x42, 0x71, 0xd6, 0x58, 0xee, 0xfb, 0x94, 0x31, 0x59, 0x75, 0x8b, 0x94, 0x4f, 0xfc, 0x4d,
	0x83, 0xe6, 0x24, 0x0e, 0x26, 0x61, 0x44, 0x91, 0x03, 0xad, 0xf2, 0x0f, 0x45, 0x4e, 0xf5, 0x16,
	0x9b, 0xb6, 0xe0, 0x18, 0xb5, 0x1c, 0x52, 0x46, 0xa7, 0xd0, 0xae, 0x16, 0x5e, 0x32, 0x6e, 0x0d,
	0x9c, 0x7e, 0x71, 0x12, 0xfa, 0xe5, 0x49, 0xe8, 0x4f, 0x4b, 0x04, 0x59, 0x81, 0x45, 0x34, 0x59,
	0x80, 0x51, 0x44, 0x13, 0xb2, 0xd0, 0x65, 0x5e, 0x20, 0xf6, 0x43, 0xb4, 0x55, 0xca, 0xf8, 0x1d,
	0x20, 0x42, 0xfd, 0x38, 0x9d, 0xf1, 0x14, 0x59, 0x55, 0xcd, 0x1e, 0x74, 0x52, 0xea, 0xd3, 0xf0,
	0x99, 0xce, 0x44, 0xde, 0x4c, 0xad, 0x7f, 0x5d, 0x39, 0xf8, 0xa1, 0x81, 0xfd, 0xa1, 0xb8, 0x59,
	0xe7, 0xf1, 0x62, 0x41, 0xfd, 0x2c, 0x4e, 0xd1, 0xff, 0x60, 0x16, 0xd4, 0x20, 0xb4, 0xc6, 0xae,
	0x6a, 0x82, 0xf3, 0x5b, 0x4d, 0xa7, 0x7e, 0xfb, 0x0f, 0xac, 0xf2, 0xe8, 0xd0, 0x6b, 0x8a, 0x56,
	0x6c, 0x3b, 0xbf, 0x57, 0x62, 0xfd, 0x2a, 0x1d, 0xf3, 0xf1, 0xe7, 0x17, 0x8d, 0x83, 0x8b, 0x80,
	0xf5, 0x13, 0xe8, 0x6c, 0xd7, 0x95, 0xea, 0x9b, 0x13, 0x80, 0x55, 0xa9, 0xe8, 0x17, 0x89, 0x51,
	0x8d, 0x71, 0x76, 0x54, 0x5e, 0xaf, 0x99, 0x38, 0xd0, 0x1e, 0x4d, 0x49, 0xf4, 0xf1, 0xcf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x8c, 0xef, 0x69, 0x83, 0x9f, 0x05, 0x00, 0x00,
}
